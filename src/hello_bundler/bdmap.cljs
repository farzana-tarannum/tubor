(ns hello-bundler.bdmap)

(defn test-map []
  (let []
    [:svg {:viewBox "0 0 500 700"}
     [:rect {:width "400"
             :height "600"
             :x 100
             :y 100}]]))

(defn bd-map []
  (let []
    [:svg {:viewBox "0 0 500 700"}
     [:path {:d "m 188.20014,52.038408 c 5.24283,0.138047 0.31509,6.755095 4.56552,6.902369 4.25043,0.147285 5.63905,0.813293 5.63905,0.813293 0,0 3.61597,4.852523 3.54328,6.868852 -0.0727,2.016329 -1.18034,10.524195 2.02393,11.781986 3.20427,1.25779 0.92253,-3.406812 3.24839,-1.931726 2.32585,1.475083 -1.23521,4.767654 -1.23521,4.767654 l 2.9618,2.825598 -5.23266,11.512298 c 0,0 -1.52211,-11.832927 0,0 1.5221,11.832928 6.5286,25.184138 4.25633,26.545238 -2.27228,1.36111 0.40391,16.63121 -3.06001,18.44599 -3.46392,1.81478 0.24732,14.52882 2.66613,14.67082 2.41882,0.142 3.32013,-5.75856 5.62072,-3.7973 2.30059,1.96126 16.20803,9.913 17.44372,10.09905 1.23568,0.18605 11.42132,3.20674 14.45937,2.31569 3.03807,-0.89105 2.83141,4.75327 9.45974,5.83295 6.62836,1.07967 11.54736,-2.31286 11.93683,-2.38708 0.38946,-0.0742 12.53197,-2.35519 22.4869,0.59991 9.95493,2.95509 9.47839,4.63382 9.62837,1.50593 0.15,-3.12789 21.34092,-5.46896 21.34092,-5.46896 0,0 26.78497,-0.14825 25.6138,4.37801 -1.17117,4.52626 13.47732,1.14399 16.95201,-1.87074 3.47469,-3.01472 3.80984,9.50301 10.71253,5.41893 6.90267,-4.08407 25.26938,-9.71855 32.01278,-6.94159 6.74343,2.77696 17.66936,8.63679 16.54705,9.81247 -1.12228,1.17568 -2.78316,1.09102 7.34517,1.02885 10.12836,-0.0622 3.15009,2.43579 1.0145,3.87112 -2.13557,1.43533 9.50852,7.42696 9.50852,7.42696 0,0 13.68424,9.95515 7.17015,10.73325 -6.51412,0.7781 -10.81243,5.1568 -13.84185,2.89427 -3.02943,-2.26254 -3.32791,-9.04783 -6.45723,-5.20378 -10.61258,13.0365 -3.17567,15.46279 -3.67995,16.74387 -0.56416,1.43321 -6.41321,17.08653 -5.20421,19.52909 1.209,2.44256 -6.51196,6.49594 -6.51196,6.49594 0,0 5.00624,14.01674 -3.05354,14.53202 -8.05981,0.51529 -3.30179,7.88212 -8.37448,5.94234 -5.07271,-1.93981 -7.35026,-2.11355 -5.24359,5.44712 2.10664,7.56069 -3.26203,18.04059 -8.79596,11.49738 -5.5339,-6.5432 -7.74362,-12.74217 -7.61876,1.27693"
             :style {:fill "none"
                     :stroke-width "2px"
                     :stroke "#000000"}
             }]
     [:path {:style {:fill "none"
                     :stroke-width "2px"
                     :stroke "#000000"}
             :d "m 378.04824,276.95341 c 0,0 -4.4229,0.50204 -8.59031,-5.86798 -4.1674,-6.37005 4.93491,10.24812 -4.3204,13.21869 -9.25531,2.9706 -21.17074,-7.99802 -20.77486,-0.82888 0.3959,7.16912 -13.98319,16.27002 -11.49395,19.51052 2.48924,3.2405 0.23,21.34305 -4.03974,19.79274 -4.26976,-1.55031 -4.74181,10.08353 0.58374,10.08353 5.32552,0 13.58114,62.78557 13.58114,62.78557 l 4.50905,1.49378 c 0,0 -4.30631,-21.96242 -1.68936,-21.81212 2.61695,0.15024 10.56481,7.329 9.50638,9.87131 -1.05843,2.54231 3.40355,11.10829 3.38962,13.1242 -0.0143,2.01592 6.365,14.42435 8.49764,11.21114 2.13262,-3.21324 18.70753,-6.24407 17.53779,-15.78629 -1.16974,-9.54224 -5.46338,-17.02819 -5.46338,-17.02819 0,0 9.411,-20.88907 12.05952,-20.46847 2.64853,0.42059 8.34598,-5.05015 4.108,-24.31662 -4.23795,-19.26648 8.94434,0.72704 8.94434,0.72704 0,0 9.78647,-9.68902 11.40195,-9.38893 1.61545,0.30012 3.30362,10.12539 5.30609,9.07122 2.00246,-1.05417 -0.71552,-9.18845 2.77215,-7.44126 3.48769,1.74719 5.24019,2.26635 4.16985,4.20402 -1.07033,1.93767 -0.14151,24.66865 2.61736,26.57243 5.21456,3.59836 5.64672,26.7049 2.05669,27.53543 -1.90238,0.4401 -0.0303,20.03032 3.51276,28.01517 0.28323,0.6383 5.69094,1.75396 5.56177,5.41236 -0.38315,10.85216 11.64218,21.57283 7.96273,27.84521 -3.50501,5.97501 12.79456,53.2898 8.45441,53.18259 h -0.25476 c 0,0 4.34316,-2.0859 0,0 -4.34319,2.08591 4.71904,28.03534 2.80231,29.89481 -1.91672,1.85948 -2.42874,43.1455 0.10547,43.94191 2.53434,0.7964 1.17743,17.85074 5.09943,17.91081 3.92202,0.06 -7.16112,4.33974 -7.16112,4.33974 0,0 -3.00259,-13.52934 -5.29343,-12.81372 -2.29085,0.71564 -5.86019,1.50679 -5.86019,1.50679 0,0 1.55293,0.7104 0,0 -1.55293,-0.71041 -3.24536,2.89874 -4.68397,-2.07155 -1.4386,-4.97031 -2.50972,-13.78005 -9.54929,-6.58638 -7.03955,7.19364 -6.07357,7.51924 -6.07357,7.51924 0,0 -8.26436,8.78828 -5.60807,23.49614 2.65631,14.70783 18.41047,42.29921 12.23964,44.61055 -6.17083,2.31133 -10.34283,-26.02041 -18.84774,-35.99967 -8.50493,-9.97926 -7.58052,-12.81605 -8.05536,-18.83981 -0.47483,-6.02376 -7.0889,-26.87548 -3.5653,-44.38883"
             }]
     [:path {:d "m 188.20014,52.038408 c -5.56223,28.823943 -1.3758,19.934014 -5.98813,28.823943 -1.34536,2.593076 -0.22103,-5.741644 -4.07317,-4.498933 -12.56486,4.053454 -25.57569,-12.479986 -31.89042,-14.666753 -2.73731,-0.947922 -2.13072,-3.458485 -2.75349,-6.392174 -1.43112,-6.741676 -0.76201,-16.039588 -0.76201,-16.039588 l -4.80092,-3.064762 0.43685,-2.622512 c 0,0 -9.94806,-6.032148 -9.54433,-6.929941 0.40372,-0.897793 -4.03834,5.670631 -4.16715,8.070891 -0.1288,2.400259 13.91184,12.237479 11.92676,12.792248 -1.98507,0.554771 -1.2257,3.125514 -1.88373,3.769421 -0.65803,0.64391 -11.23693,-4.026419 -10.59702,-5.675036 0.63991,-1.648616 -5.42498,3.633074 -4.59388,4.427005 0.8311,0.793929 -7.01213,-6.317395 -5.93455,-7.095262 1.07757,-0.777867 -8.00567,3.430493 -9.41032,3.84405 -1.40464,0.413557 -0.80237,-2.847052 -0.80237,-2.847052"
             :style {:fill "none"
                     :stroke-width "2px"
                     :stroke "#000000"}}]
     [:path {:style {:fill "none"
                     :stroke-width "2px"
                     :stroke "#000000"}
             :d "m 103.36226,43.933953 c 6.06898,-3.843376 5.70996,-7.002779 5.25011,-6.886805 -0.45985,0.115976 -9.6869,-8.340703 -7.59046,-9.279729 2.09644,-0.939024 -1.168159,0.576743 -1.865254,-0.558571 -0.697093,-1.135314 3.585754,-2.323512 -0.885067,-2.966343 C 93.80077,23.599674 87.08156,17.964939 84.577641,15.990129 82.07372,14.01532 83.136367,5.2803227 80.783677,6.4299693 78.430986,7.579616 71.656055,27.893369 75.387293,25.281031 c 3.731236,-2.612338 7.09401,-1.223886 7.09401,-1.223886 0,0 11.213543,11.758336 7.359164,12.060417 -3.854381,0.302081 -18.062852,10.1587 -16.767057,15.625281 1.295798,5.466581 -7.21275,-4.259824 -13.165955,6.514774 -5.953205,10.7746 5.785765,9.259648 -4.963983,17.334246 -10.749748,8.074597 0.69269,23.303124 0.69269,23.303124 0,0 7.560862,-2.116096 9.286584,-3.017427 1.725719,-0.901331 2.666826,7.85861 17.244705,15.87877 14.577878,8.02015 10.440252,22.19936 19.821949,22.10444 9.3817,-0.0949 13.02702,0.85682 15.04951,9.2776 2.02249,8.42077 12.43395,6.49573 13.72483,7.73407 1.29088,1.23834 -5.3399,13.32821 -4.66597,15.77239 0.67394,2.44418 -9.3595,-2.81079 -9.3595,-2.81079 0,0 1.26791,2.83398 -4.98371,3.88781 -6.25161,1.05382 -8.34714,-9.76051 -17.692426,-2.35407 -9.345283,7.40644 -10.333148,-17.76656 -12.637348,13.93079 -2.304202,31.69736 -14.747402,15.24013 -20.978245,11.5375 -6.230843,-3.70263 -6.607112,12.22857 -6.607112,12.22857 0,0 4.777357,-9.09492 0.104833,0.17424 -4.672519,9.26916 -9.561333,15.01706 -9.561333,15.01706 0,0 8.966631,18.8647 4.798343,19.22566 -4.168288,0.36095 31.04056,13.09635 36.924593,21.65578 5.884036,8.55941 17.345245,0.37462 17.345245,0.37462 0,0 0.98941,30.61841 3.8973,31.86219 2.90789,1.24379 0.38465,7.275 -1.98982,13.01324 -2.37446,5.73826 -10.174015,0.81457 -11.806199,6.13638 -1.632183,5.32179 -1.589943,24.18284 -1.589943,24.18284 0,0 10.557762,18.4029 13.862332,17.42202 3.30457,-0.98088 2.61184,-8.29064 3.97072,-4.5936 1.35888,3.69705 -3.37039,22.3941 -6.20708,24.0795 -2.83669,1.68539 4.98769,8.00831 7.67707,7.38805 2.68938,-0.62024 17.97309,0.38707 16.03268,3.09676 -1.9404,2.70967 -11.18913,4.06105 -10.77094,15.30439 0.4182,11.2433 12.74217,27.34316 8.62052,29.90466 -4.12165,2.5615 0.97757,24.3385 -3.37776,26.89186 -4.35532,2.55338 7.95574,20.42726 8.77,32.84743 0.81426,12.42014 7.01299,30.81521 4.33531,32.5949 -2.67767,1.77969 -7.41742,14.35186 -3.61497,18.05648 3.80245,3.70462 8.67746,16.43252 8.67746,16.43252 0,0 -15.75599,11.23562 -23.61911,-1.15388 -7.86312,-12.38947 -3.11571,9.98095 -9.22339,9.03617 -6.10767,-0.94479 -7.831892,-0.36745 -6.81093,-4.1161 1.02097,-3.74862 -1.66664,-19.51904 -0.11016,-27.63112 1.55648,-8.11207 8.29843,-17.86507 6.43165,-19.87909 -1.86678,-2.01402 0.19657,-3.82855 -3.52071,-2.09445 -3.717282,1.73409 -9.102289,27.82759 -7.343475,28.1934 1.758814,0.36579 -3.183883,16.81955 -3.795386,18.94857 -0.611502,2.12903 -5.853521,4.52519 -4.271202,6.78717 1.582317,2.26195 -14.784303,13.29088 -9.175879,0.27986 5.608422,-13.01103 1.192305,-15.60419 3.621891,-20.58541 2.429583,-4.98121 6.900952,-14.96807 0.65264,-13.54776 -6.248312,1.42033 -2.8477,13.02164 -4.486507,20.26662 -1.638807,7.24498 -3.544474,13.60433 -5.645664,10.69398 -2.101191,-2.91039 -1.092179,-14.64579 -1.650965,-18.64079 -0.558783,-3.995 -0.128404,9.128 -5.477102,15.51788 -5.348693,6.38988 0.628017,5.63129 -6.192457,5.53307 -6.820472,-0.0983 -3.552915,-14.81369 -4.125974,-21.99559 -0.57306,-7.18191 -3.481486,-16.10586 -4.331626,-12.64093 -0.850138,3.4649 -0.814248,24.07052 -0.802779,26.59667 0.01143,2.52611 -8.512319,3.69073 -9.718038,-2.53534 -1.205719,-6.22607 3.906998,-21.19259 6.999162,-24.388 3.092162,-3.19538 3.092162,-3.19538 3.092162,-3.19538 0,0 0.977469,-18.93245 6.585157,-19.11931 5.607691,-0.1869 3.156479,-12.82757 -7.493298,-15.08959 -10.649778,-2.262 -18.14995,-9.98519 -17.299893,-18.29569 0.850058,-8.3105 -4.830454,-10.22317 -3.366959,-5.24931 1.463495,4.97388 1.326845,21.05161 6.219412,22.63031 4.892567,1.57869 14.997819,5.18061 13.698536,5.14028 -1.299284,-0.0402 10.698257,3.45755 -1.877041,15.14953 -12.575298,11.69197 -14.618524,28.76342 -17.764983,24.97152 -3.14646,-3.79191 -7.064156,12.60281 -15.743191,13.99381 -8.6790352,1.391 -13.75941986,2.20743 -12.90961095,1.43347"}
      ]
     [:path {:d "m 403.50327,550.19165 c -19.25053,-58.17936 -8.91772,-46.16886 -19.25053,-58.17936 -10.33278,-12.0105 -12.39007,-62.65964 -34.04152,-64.63357 -21.65146,-1.97393 -16.01205,-0.30822 -16.88636,2.14228 -0.87433,2.45048 3.88057,5.502 3.88057,5.502 l -2.66428,4.24336 c 0,0 -33.19948,-19.93024 -31.98105,-20.49643 1.21845,-0.56619 -9.47436,-1.89009 -12.7046,0.0462 -3.23024,1.93626 -14.64719,-16.56205 -14.64719,-16.56205"
             :style {:fill "none"
                     :stroke-width "2px"
                     :stroke "#000000"}}] ]))




(defn stat1 []
  (let [[mp & np :as points]
        [[0 10] [10 40]
         [40 30] [60 5]
         [90 45] [120 10]
         [150 45] [200 10]]
        m (fn [[x y]]
            (str  "M" " "
                  (first (first points))
                  ","
                  (second (first points))
                  " "))
        line-cmd (fn [[x y] index]
                   (str "L "
                        x
                        ","
                        y
                        " "))
        line (fn [[x1 y1] [x2 y2]]
               (let [lx (if (> x2 x1)
                          (- x2 x1)
                          (- x1 x2))
                     ly (if (> y2 y1)
                          (- y2 y1)
                          (- y1 y2))]
                 [(js/Math.sqrt
                            (+
                             (* lx lx)
                             (* ly ly)))
                  (js/Math.atan2 ly lx)]))
        control-point (fn [current previous next1 reverse1]
                        (let [p (if previous  previous current)
                              n (if next1 next1 current)
                              [x y] current
                              smoothing 0.2
                              [angle-t length-t] (line p n)
                              angle (+ angle-t (if reverse1  js/Math.PI 0))
                              length (* length-t 0.6)]
                          [
                           (+ x (* length (js/Math.cos angle)))
                           (+ y (* length (js/Math.sin angle)))
                           ]))
        bezier-command (fn [[x y :as point] index]
                         (let [[cx1 cy1] (control-point
                                          (get points (- index 1))
                                          (get points (- index 2))
                                          point false)
                               [cx2 cy2] (control-point
                                          point
                                          (get points (- index 1))
                                          (get points (+ index 1)) true)]
                           (str "C " cx1 "," cy1
                                " " cx2 " ," cy2
                                " " x " ," y " ")))
        svg-path (fn [command]
                    (first
                     (reduce (fn [[acc index] point]
                               [ (str acc  (command point index))
                                (+ index 1)])
                             [(m mp) 0] np)))
        ]
    [:svg {:viewBox "0 0 200 200"}
     [:path {:style {:fill "none"
                     :stroke-width ".2px"
                     :stroke "#888"}
             :d (svg-path line-cmd)}]

     (map-indexed (fn [i [x y]]
                    [:circle {
                              :key (str "svg-circle-" i)
                              :cx x
                              :cy y
                              :r 1
                              :fill "pink"}])
          points)

     (map-indexed
      (fn [i [[x1 y1 :as p1]
             [x2 y2 :as p2]
             [x3 y3 :as p3]
             [x4 y4 :as p3]] ]
        [:path {:key (str "grad-gard-svg-path2-" i)
                :d (str "M " x1 "," y1 " L " x3 "," y3)
                :style {:fill "none"
                        :stroke-width ".2px"
                        :stroke "green"}}])
      (partition 4 1 points))

     (map-indexed
      (fn [i [[x1 y1 :as p1]
             [x2 y2 :as p2]
             [x3 y3 :as p3]
             [x4 y4 :as p3]] ]
        [:path {:key (str "grad-svg-path" i)
                :d (str "M " x2 "," y2 " L " x4 "," y4)
                :style {:fill "none"
                        :stroke-width ".4px"
                        :stroke "orange"}}])
      (partition 4 1 points))
     ])
  )

(defn stat2 []
  (let [points [
                [0 10] [10 40] [40 30] [60 5]
                [90 45] [120 10] [150 45] [200 10]]
        m (fn [[x y]]
            (str  "M" " "
                  x
                  ","
                  y
                  " "))
        line-cmd (fn [acc [x y] index]
                   )


        bezier-command (fn [[cx cy] [cxx cyy] [x y]]
                         (str "C "
                              cx
                              ","
                              cy
                              " "
                              cxx
                              " ,"
                              cyy
                              " "
                              x
                              " ,"
                              y
                              " "))
        line-len (fn [[x1 y1] [x2 y2]]
                   (let [lx (- x2 x1)
                         ly (- y2 y1)]
                     (js/Math.sqrt
                      (+
                       (* lx lx)
                       (* ly ly)))
                     ))
        angle (fn [[x1 y1] [x2 y2]]
             (let [lx (- x2 x1)
                   ly (- y2 y1)]
               (js/Math.atan2 ly lx)))
        curve-points
        (map (fn [quadro]
               (let [[start-p [x1 y1 :as start] start-n _] quadro
                     [_ end-p [x2 y2 :as end] end-n] quadro
                     start-len (* .3 (line-len start-p start-n))
                     start-angle (angle start-p start-n)
                     end-len (* .15 (line-len end-p end-n))
                     end-angle (+ js/Math.PI (angle end-p end-n))
                     projection (fn [[x y] angle len]
                            [
                             (+ x (* (js/Math.cos angle) len))
                             (+ y (*  (js/Math.sin angle) len))])
                     control-point-1 (projection start start-angle start-len)
                     control-point-2 (projection end end-angle end-len)]
           [[start  control-point-1]
            [end  control-point-2]]))
       (partition 4 1
                  (conj (into [[0 20]] points) [210 20])))
        svg-path-data (fn [[mp & np :as points]]
                        (reduce (fn [acc [x y]]
                                  (str acc  "L " x "," y " "))
                                 (m mp)
                                 np))
        svg-path (fn [paths]
                   [:path {:style {:fill "none"
                                   :stroke-width ".8px"
                                   :stroke "#000000"}
                           :d (svg-path-data paths)}])
        draw-curve (str (m [0 0])  " "
                        (apply str (map  (fn [[[_ c1] [end c2]]]
                                           (bezier-command c1 c2 end) ) curve-points))
                        " L 200,0 z")
        a (js/console.log draw-curve)
        ]
    [:svg {:viewBox "0 0 200 200"}
     [:defs
      [:linearGradient {:id "grad"
                        :x1 0
                        :x2 1
                        :y1 1
                        :y2 0}
       [:stop {:style {:stop-color "hsl(30,80%,80%)"
                       }
               :offset "0%"}
        ]
       [:stop {:style {:stop-color "hsl(45,80%,80%)"
                       :stop-opacity "15"}
               :offset "50%"}
        ]
       [:stop {:style {:stop-color "hsl(60,80%,80%)"}
               :offset "100%"}
        ]]]
 ;;    [svg-path points]
;;     (map (fn [[line-points1 line-points2]]
 ;;           (svg-path line-points2) ) curve-points)
;;     (map (fn [[line-points1 line-points2]]
 ;;           (svg-path line-points1) ) curve-points)
     [:path {:d draw-curve
             :style {:fill "url(#grad)"
                     :stroke-width ".2px"
                     :stroke "hsl(120,20%,60%)"}}]
     ]


    ))
